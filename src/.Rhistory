df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "VILCUN"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
k$sd
k$group_agg
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
k
l = get_agg_opt(X = XW_data$X, W = XW_data$W, seed = 0)
l
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
k
l
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "LAS COMPANIAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = FALSE)
X = XW_data$X
W = XW_data$W
a = run_em(XW_data)
as.matrix(a)
a$logLik
devtools::install_github("DanielHermosilla/ecological-inference-elections")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "LAS COMPANIAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = FALSE)
X = XW_data$X
W = XW_data$W
a = run_em(XW_data)
a$prob
a$logLik
a$iterations
a$q
a$cond_prob
b = bootstrap(object = XW_data)
b
f = run_em(X = c$X, W = c$W, method = "mcmc")
c = simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 4, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc")
f = run_em(X = c$X, W = c$W, method = "mcmc")
?run_em
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 10000)
system("R CMD config CFLAGS")
~/.R/Makevars
libraary("usethis")
library("usethis")
usethis::edit_r_makevars()
library("fastei")
c = simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 4, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 1000)
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "LAS COMPANIAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = FALSE)
X = XW_data$X
W = XW_data$W
summary(XW_data)
a = run_em(XW_data)
as.matrix(a)
a$prob
a$logLik
XW_data$X
a$prob
a = run_em(XW_data)
a$prob
remove.packages(â€œfastei")
remove.packages("fastei")
library("fastei")
a = run_em(XW_data)
a$prob
a$logLik
remove.packages("fastei")
remove.packages("fastei")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "LAS COMPANIAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = FALSE)
X = XW_data$X
W = XW_data$W
a = run_em(XW_data, allow_mismatch = TRUE)
as.matrix(a)
a$prob
a$logLik
b = bootstrap(object = XW_data)
b
c = simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 4, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 1000)
print(f)
g = run_em(X = c$X, W = c$W, method = "mvn_cdf", verbose = TRUE)
print(g)
df <- get("chile_election_2021")
ed_vect = unique(df$ELECTORAL.DISTRICT)
ed_nballots <- table(df$ELECTORAL.DISTRICT)
print(ed_nballots)
ed = "RAUCO"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W)
k$sd
k$group_agg
XW_data
k
k$sd
k$group_agg
?get_agg_proxy
?get_agg_proxy
k$sd
k$group_agg
k
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0, feasible = FALSE)
k$sd
k$group_agg
k
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0, feasible = TRUE)
k
k$group_agg
names(k)
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
k
ed = "VILCUN"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE, verbose = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
ed = "VILCUN"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0, verbose = TRUE)
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
k = get_agg_proxy(X = XW_data$X, W = XW_data$W, seed = 0)
k
k$group_agg
l = get_agg_opt(X = XW_data$X, W = XW_data$W, seed = 0)
l
remove.packages("fastei")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "LAS COMPANIAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = FALSE)
X = XW_data$X
W = XW_data$W
# print(XW_data)
a = run_em(XW_data, allow_mismatch = TRUE)
as.matrix(a)
b = bootstrap(object = XW_data)
c = simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 4, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 500, verbose = TRUE)
c = simulate_election(num_ballots = 5, num_candidates = 2, num_groups = 2, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
c = simulate_election(num_ballots = 3, num_candidates = 2, num_groups = 2, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 300, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 400, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 500, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 1000, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 500, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 1000, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 5000, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 6000, verbose = TRUE, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 10000, verbose = TRUE, seed = 0)
c = simulate_election(num_ballots = 2, num_candidates = 2, num_groups = 2, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
?simulate_election
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 100, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 10, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 5, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 1, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
c$X
c$W
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
# data("chile_election_2021")
# df <- get("chile_election_2021")
# function that filters a specific electoral district from the Chilean election dataset
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 1, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "LAS COMPANIAS"
# merge_blank_null = TRUE
# remove_mismatch = FALSE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
c = simulate_election(num_ballots = 1, num_candidates = 2, num_groups = 2, ballot_voters = 1, seed = 0)
f = run_em(X = c$X, W = c$W, method = "mcmc", samples = 100, verbose = TRUE, seed = 0)
library("fastei")
# function that filters a specific electoral district from the Chilean election dataset
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "PUERTO VARAS"
# merge_blank_null = TRUE
# remove_mismatch = TRUE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
l = get_agg_opt(X = XW_data$X, W = XW_data$W, seed = 3, method= 'mcmc', allow_mismatch = TRUE, verbose = TRUE, nboot = 50, samples = 50, step_size = 500)
devtools::install_github("DanielHermosilla/ecological-inference-elections")
library("fastei")
get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {
# elect_district = "PUERTO VARAS"
# merge_blank_null = TRUE
# remove_mismatch = TRUE
#  read dataset
df <- get("chile_election_2021")
# filter a specific electoral district
df_ed = df[df$ELECTORAL.DISTRICT == elect_district,]
rownames(df_ed) = df_ed$BALLOT.BOX
# remove ballot boxes with mismatch of votes and voters
if(remove_mismatch)
df_ed = df_ed[df_ed$MISMATCH == FALSE,]
# get columns of candidates' votes
X = df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("C1","C2","C3","C4","C5","C6","C7","BLANK.VOTES","NULL.VOTES") ]
# merge blank and null votes
if(merge_blank_null)
X$C8 = X$BLANK.VOTES + X$NULL.VOTES
X = X[,c("C1","C2","C3","C4","C5","C6","C7","C8")]
# convert X to matrix
X = as.matrix(X[,c("C1","C2","C3","C4","C5","C6","C7","C8")])
# get voters of ecah demographic group, and convert to matrix
W = as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c("X18.19","X20.29","X30.39","X40.49","X50.59","X60.69","X70.79","X80.") ])
obj = eim(X = X, W = W)
return(obj)
}
ed = "PUERTO VARAS"
XW_data = get_XW_Chile(elect_district = ed, remove_mismatch = TRUE)
l = get_agg_opt(X = XW_data$X, W = XW_data$W, seed = 3, method= 'mvn_cdf', allow_mismatch = TRUE, verbose = TRUE, nboot = 50, samples = 50, step_size = 500)
# generates the data for Figure 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R_functions.R")
## data for the plot of districts "EL GOLF" and "SALTOS DEL LAJA"
fun_laja_golf <- function() {
district_name_arr = c('EL GOLF', 'SALTOS DEL LAJA')
group_agg_arr = list(c(1,2,3,4,5,6,7,8),
c(2,6,8))
for(district in district_name_arr){
for(group_agg in group_agg_arr){
fun_district_specific_agg(district_name = district, group_agg = group_agg, save_folder = "output_2/figure3", do_bootstrap = FALSE)
}
}
}
fun_laja_golf()
# generates the data for Figure 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R_functions.R")
## data for the plot of districts "EL GOLF" and "SALTOS DEL LAJA"
fun_laja_golf <- function() {
district_name_arr = c('EL GOLF', 'SALTOS DEL LAJA')
group_agg_arr = list(c(1,2,3,4,5,6,7,8),
c(2,6,8))
for(district in district_name_arr){
for(group_agg in group_agg_arr){
fun_district_specific_agg(district_name = district, group_agg = group_agg, save_folder = "output/figure3", do_bootstrap = FALSE)
}
}
}
fun_laja_golf()
getwd()
